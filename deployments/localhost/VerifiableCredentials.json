{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        }
      ],
      "name": "CredentialIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        }
      ],
      "name": "CredentialRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "credentials",
      "outputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "credentialHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "issuedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "revoked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "getCredentialsByIssuer",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subject",
          "type": "address"
        }
      ],
      "name": "getCredentialsForSubject",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "credentialHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expirationPeriod",
          "type": "uint256"
        }
      ],
      "name": "issueCredential",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "issuerCredentials",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        }
      ],
      "name": "revokeCredential",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "subjectCredentials",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "credentialId",
          "type": "bytes32"
        }
      ],
      "name": "verifyCredential",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc00af736c0bbe5e40068847b4db3436c904c664c37ee7524adb4db33e4d7916b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "865700",
    "logsBloom": "0x
    "blockHash": "0x8cb925d63bf8536fd814485cc2df91bcc16d7893138c327830fbbd8221da0da8",
    "transactionHash": "0xc00af736c0bbe5e40068847b4db3436c904c664c37ee7524adb4db33e4d7916b",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "865700",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "65e8a424810aee1b35a19099b0990932",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"CredentialIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"}],\"name\":\"CredentialRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"credentials\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"getCredentialsByIssuer\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"getCredentialsForSubject\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expirationPeriod\",\"type\":\"uint256\"}],\"name\":\"issueCredential\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issuerCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"}],\"name\":\"revokeCredential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subjectCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"credentialId\",\"type\":\"bytes32\"}],\"name\":\"verifyCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getCredentialsByIssuer(address)\":{\"params\":{\"issuer\":\"Address of the credential issuer\"},\"returns\":{\"_0\":\"An array of credential IDs\"}},\"getCredentialsForSubject(address)\":{\"params\":{\"subject\":\"Address of the credential subject\"},\"returns\":{\"_0\":\"An array of credential IDs\"}},\"issueCredential(address,bytes32,uint256)\":{\"params\":{\"credentialHash\":\"A unique hash representing the credential details\",\"expirationPeriod\":\"Duration in seconds for credential validity\",\"subject\":\"The address of the credential subject\"},\"returns\":{\"credentialId\":\"Unique identifier for the issued credential\"}},\"revokeCredential(bytes32)\":{\"params\":{\"credentialId\":\"Unique identifier of the credential to revoke\"}},\"verifyCredential(bytes32)\":{\"params\":{\"credentialId\":\"Unique identifier of the credential\"},\"returns\":{\"isValid\":\"Whether the credential is currently valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCredentialsByIssuer(address)\":{\"notice\":\"Get credentials issued by a specific issuer\"},\"getCredentialsForSubject(address)\":{\"notice\":\"Get credentials issued to a specific subject\"},\"issueCredential(address,bytes32,uint256)\":{\"notice\":\"Issue a new verifiable credential\"},\"revokeCredential(bytes32)\":{\"notice\":\"Revoke a previously issued credential\"},\"verifyCredential(bytes32)\":{\"notice\":\"Verify a credential's validity\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VerifiableCredentials.sol\":\"VerifiableCredentials\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"},\"contracts/VerifiableCredentials.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract VerifiableCredentials {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    // Struct to represent a Verifiable Credential\\r\\n    struct Credential {\\r\\n        address issuer;\\r\\n        address subject;\\r\\n        bytes32 credentialHash;\\r\\n        uint256 issuedAt;\\r\\n        uint256 expiresAt;\\r\\n        bool revoked;\\r\\n    }\\r\\n\\r\\n    // Mapping to store credentials\\r\\n    mapping(bytes32 => Credential) public credentials;\\r\\n    \\r\\n    // Mapping to track credentials issued to a subject\\r\\n    mapping(address => bytes32[]) public subjectCredentials;\\r\\n    \\r\\n    // Mapping to track credentials issued by an issuer\\r\\n    mapping(address => bytes32[]) public issuerCredentials;\\r\\n\\r\\n    // Events for credential lifecycle\\r\\n    event CredentialIssued(\\r\\n        bytes32 indexed credentialId, \\r\\n        address indexed issuer, \\r\\n        address indexed subject\\r\\n    );\\r\\n    \\r\\n    event CredentialRevoked(\\r\\n        bytes32 indexed credentialId\\r\\n    );\\r\\n\\r\\n    // Modifier to ensure only the credential issuer can revoke\\r\\n    modifier onlyIssuer(bytes32 credentialId) {\\r\\n        require(\\r\\n            credentials[credentialId].issuer == msg.sender, \\r\\n            \\\"Only the issuer can revoke this credential\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Issue a new verifiable credential\\r\\n     * @param subject The address of the credential subject\\r\\n     * @param credentialHash A unique hash representing the credential details\\r\\n     * @param expirationPeriod Duration in seconds for credential validity\\r\\n     * @return credentialId Unique identifier for the issued credential\\r\\n     */\\r\\n    function issueCredential(\\r\\n        address subject, \\r\\n        bytes32 credentialHash, \\r\\n        uint256 expirationPeriod\\r\\n    ) external returns (bytes32 credentialId) {\\r\\n        // Generate a unique credential ID\\r\\n        credentialId = keccak256(abi.encodePacked(\\r\\n            msg.sender, \\r\\n            subject, \\r\\n            credentialHash, \\r\\n            block.timestamp\\r\\n        ));\\r\\n\\r\\n        // Create and store the credential\\r\\n        Credential memory newCredential = Credential({\\r\\n            issuer: msg.sender,\\r\\n            subject: subject,\\r\\n            credentialHash: credentialHash,\\r\\n            issuedAt: block.timestamp,\\r\\n            expiresAt: block.timestamp + expirationPeriod,\\r\\n            revoked: false\\r\\n        });\\r\\n\\r\\n        // Store the credential\\r\\n        credentials[credentialId] = newCredential;\\r\\n        \\r\\n        // Track credentials for issuer and subject\\r\\n        subjectCredentials[subject].push(credentialId);\\r\\n        issuerCredentials[msg.sender].push(credentialId);\\r\\n\\r\\n        // Emit event\\r\\n        emit CredentialIssued(credentialId, msg.sender, subject);\\r\\n\\r\\n        return credentialId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Verify a credential's validity\\r\\n     * @param credentialId Unique identifier of the credential\\r\\n     * @return isValid Whether the credential is currently valid\\r\\n     */\\r\\n    function verifyCredential(bytes32 credentialId) \\r\\n        public \\r\\n        view \\r\\n        returns (bool isValid) \\r\\n    {\\r\\n        Credential memory credential = credentials[credentialId];\\r\\n        \\r\\n        return (\\r\\n            credential.issuer != address(0) && // Credential exists\\r\\n            !credential.revoked && // Not revoked\\r\\n            block.timestamp <= credential.expiresAt // Not expired\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Revoke a previously issued credential\\r\\n     * @param credentialId Unique identifier of the credential to revoke\\r\\n     */\\r\\n    function revokeCredential(bytes32 credentialId) \\r\\n        external \\r\\n        onlyIssuer(credentialId) \\r\\n    {\\r\\n        // Mark credential as revoked\\r\\n        credentials[credentialId].revoked = true;\\r\\n        \\r\\n        // Emit revocation event\\r\\n        emit CredentialRevoked(credentialId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get credentials issued to a specific subject\\r\\n     * @param subject Address of the credential subject\\r\\n     * @return An array of credential IDs\\r\\n     */\\r\\n    function getCredentialsForSubject(address subject) \\r\\n        external \\r\\n        view \\r\\n        returns (bytes32[] memory) \\r\\n    {\\r\\n        return subjectCredentials[subject];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get credentials issued by a specific issuer\\r\\n     * @param issuer Address of the credential issuer\\r\\n     * @return An array of credential IDs\\r\\n     */\\r\\n    function getCredentialsByIssuer(address issuer) \\r\\n        external \\r\\n        view \\r\\n        returns (bytes32[] memory) \\r\\n    {\\r\\n        return issuerCredentials[issuer];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb1faf9d6a6633a36231db77b3705165ab966ce2faf57fa2c0b5103cfc16a7144\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610eb8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634dbf87cc1161005b5780634dbf87cc1461015257806353b0269414610182578063c3c00f74146101b2578063ca6eec78146101e257610088565b80631712dbd91461008d5780631abac44b146100bd578063299d0348146100ed57806332860d6b14610122575b600080fd5b6100a760048036038101906100a2919061098c565b6101fe565b6040516100b49190610a81565b60405180910390f35b6100d760048036038101906100d29190610ad9565b610295565b6040516100e49190610b28565b60405180910390f35b61010760048036038101906101029190610b6f565b6102c6565b60405161011996959493929190610bd5565b60405180910390f35b61013c6004803603810190610137919061098c565b61034f565b6040516101499190610a81565b60405180910390f35b61016c60048036038101906101679190610b6f565b6103e6565b6040516101799190610c36565b60405180910390f35b61019c60048036038101906101979190610c51565b610548565b6040516101a99190610b28565b60405180910390f35b6101cc60048036038101906101c79190610ad9565b6107f5565b6040516101d99190610b28565b60405180910390f35b6101fc60048036038101906101f79190610b6f565b610826565b005b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561028957602002820191906000526020600020905b815481526020019060010190808311610275575b50505050509050919050565b600260205281600052604060002081815481106102b157600080fd5b90600052602060002001600091509150505481565b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156103da57602002820191906000526020600020905b8154815260200190600101908083116103c6575b50505050509050919050565b6000806000808481526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161415801561053057508060a00151155b8015610540575080608001514211155b915050919050565b6000338484426040516020016105619493929190610d2e565b60405160208183030381529060405280519060200120905060006040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200142815260200184426105d69190610dab565b81526020016000151581525090508060008084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550905050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150558473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16837f2ca620382cc7dc0c7e3dec8ad0cccc7346c771f0e2130ed0cb76c3152c15b27360405160405180910390a4509392505050565b6001602052816000526040600020818154811061081157600080fd5b90600052602060002001600091509150505481565b803373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c190610e62565b60405180910390fd5b600160008084815260200190815260200160002060050160006101000a81548160ff021916908315150217905550817f3cc2375f3fc7711ba27361cde93880f578742f9f050acee766bed662d117ba7260405160405180910390a25050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109598261092e565b9050919050565b6109698161094e565b811461097457600080fd5b50565b60008135905061098681610960565b92915050565b6000602082840312156109a2576109a1610929565b5b60006109b084828501610977565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6109f8816109e5565b82525050565b6000610a0a83836109ef565b60208301905092915050565b6000602082019050919050565b6000610a2e826109b9565b610a3881856109c4565b9350610a43836109d5565b8060005b83811015610a74578151610a5b88826109fe565b9750610a6683610a16565b925050600181019050610a47565b5085935050505092915050565b60006020820190508181036000830152610a9b8184610a23565b905092915050565b6000819050919050565b610ab681610aa3565b8114610ac157600080fd5b50565b600081359050610ad381610aad565b92915050565b60008060408385031215610af057610aef610929565b5b6000610afe85828601610977565b9250506020610b0f85828601610ac4565b9150509250929050565b610b22816109e5565b82525050565b6000602082019050610b3d6000830184610b19565b92915050565b610b4c816109e5565b8114610b5757600080fd5b50565b600081359050610b6981610b43565b92915050565b600060208284031215610b8557610b84610929565b5b6000610b9384828501610b5a565b91505092915050565b610ba58161094e565b82525050565b610bb481610aa3565b82525050565b60008115159050919050565b610bcf81610bba565b82525050565b600060c082019050610bea6000830189610b9c565b610bf76020830188610b9c565b610c046040830187610b19565b610c116060830186610bab565b610c1e6080830185610bab565b610c2b60a0830184610bc6565b979650505050505050565b6000602082019050610c4b6000830184610bc6565b92915050565b600080600060608486031215610c6a57610c69610929565b5b6000610c7886828701610977565b9350506020610c8986828701610b5a565b9250506040610c9a86828701610ac4565b9150509250925092565b60008160601b9050919050565b6000610cbc82610ca4565b9050919050565b6000610cce82610cb1565b9050919050565b610ce6610ce18261094e565b610cc3565b82525050565b6000819050919050565b610d07610d02826109e5565b610cec565b82525050565b6000819050919050565b610d28610d2382610aa3565b610d0d565b82525050565b6000610d3a8287610cd5565b601482019150610d4a8286610cd5565b601482019150610d5a8285610cf6565b602082019150610d6a8284610d17565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db682610aa3565b9150610dc183610aa3565b9250828201905080821115610dd957610dd8610d7c565b5b92915050565b600082825260208201905092915050565b7f4f6e6c7920746865206973737565722063616e207265766f6b6520746869732060008201527f63726564656e7469616c00000000000000000000000000000000000000000000602082015250565b6000610e4c602a83610ddf565b9150610e5782610df0565b604082019050919050565b60006020820190508181036000830152610e7b81610e3f565b905091905056fea2646970667358221220f408d4064c3c469ddca766ed4adfccd51f71e2b7b9a6e4c32e2dd91d238e912d64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80634dbf87cc1161005b5780634dbf87cc1461015257806353b0269414610182578063c3c00f74146101b2578063ca6eec78146101e257610088565b80631712dbd91461008d5780631abac44b146100bd578063299d0348146100ed57806332860d6b14610122575b600080fd5b6100a760048036038101906100a2919061098c565b6101fe565b6040516100b49190610a81565b60405180910390f35b6100d760048036038101906100d29190610ad9565b610295565b6040516100e49190610b28565b60405180910390f35b61010760048036038101906101029190610b6f565b6102c6565b60405161011996959493929190610bd5565b60405180910390f35b61013c6004803603810190610137919061098c565b61034f565b6040516101499190610a81565b60405180910390f35b61016c60048036038101906101679190610b6f565b6103e6565b6040516101799190610c36565b60405180910390f35b61019c60048036038101906101979190610c51565b610548565b6040516101a99190610b28565b60405180910390f35b6101cc60048036038101906101c79190610ad9565b6107f5565b6040516101d99190610b28565b60405180910390f35b6101fc60048036038101906101f79190610b6f565b610826565b005b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561028957602002820191906000526020600020905b815481526020019060010190808311610275575b50505050509050919050565b600260205281600052604060002081815481106102b157600080fd5b90600052602060002001600091509150505481565b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156103da57602002820191906000526020600020905b8154815260200190600101908083116103c6575b50505050509050919050565b6000806000808481526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161415801561053057508060a00151155b8015610540575080608001514211155b915050919050565b6000338484426040516020016105619493929190610d2e565b60405160208183030381529060405280519060200120905060006040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200142815260200184426105d69190610dab565b81526020016000151581525090508060008084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550905050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150558473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16837f2ca620382cc7dc0c7e3dec8ad0cccc7346c771f0e2130ed0cb76c3152c15b27360405160405180910390a4509392505050565b6001602052816000526040600020818154811061081157600080fd5b90600052602060002001600091509150505481565b803373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c190610e62565b60405180910390fd5b600160008084815260200190815260200160002060050160006101000a81548160ff021916908315150217905550817f3cc2375f3fc7711ba27361cde93880f578742f9f050acee766bed662d117ba7260405160405180910390a25050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109598261092e565b9050919050565b6109698161094e565b811461097457600080fd5b50565b60008135905061098681610960565b92915050565b6000602082840312156109a2576109a1610929565b5b60006109b084828501610977565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6109f8816109e5565b82525050565b6000610a0a83836109ef565b60208301905092915050565b6000602082019050919050565b6000610a2e826109b9565b610a3881856109c4565b9350610a43836109d5565b8060005b83811015610a74578151610a5b88826109fe565b9750610a6683610a16565b925050600181019050610a47565b5085935050505092915050565b60006020820190508181036000830152610a9b8184610a23565b905092915050565b6000819050919050565b610ab681610aa3565b8114610ac157600080fd5b50565b600081359050610ad381610aad565b92915050565b60008060408385031215610af057610aef610929565b5b6000610afe85828601610977565b9250506020610b0f85828601610ac4565b9150509250929050565b610b22816109e5565b82525050565b6000602082019050610b3d6000830184610b19565b92915050565b610b4c816109e5565b8114610b5757600080fd5b50565b600081359050610b6981610b43565b92915050565b600060208284031215610b8557610b84610929565b5b6000610b9384828501610b5a565b91505092915050565b610ba58161094e565b82525050565b610bb481610aa3565b82525050565b60008115159050919050565b610bcf81610bba565b82525050565b600060c082019050610bea6000830189610b9c565b610bf76020830188610b9c565b610c046040830187610b19565b610c116060830186610bab565b610c1e6080830185610bab565b610c2b60a0830184610bc6565b979650505050505050565b6000602082019050610c4b6000830184610bc6565b92915050565b600080600060608486031215610c6a57610c69610929565b5b6000610c7886828701610977565b9350506020610c8986828701610b5a565b9250506040610c9a86828701610ac4565b9150509250925092565b60008160601b9050919050565b6000610cbc82610ca4565b9050919050565b6000610cce82610cb1565b9050919050565b610ce6610ce18261094e565b610cc3565b82525050565b6000819050919050565b610d07610d02826109e5565b610cec565b82525050565b6000819050919050565b610d28610d2382610aa3565b610d0d565b82525050565b6000610d3a8287610cd5565b601482019150610d4a8286610cd5565b601482019150610d5a8285610cf6565b602082019150610d6a8284610d17565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db682610aa3565b9150610dc183610aa3565b9250828201905080821115610dd957610dd8610d7c565b5b92915050565b600082825260208201905092915050565b7f4f6e6c7920746865206973737565722063616e207265766f6b6520746869732060008201527f63726564656e7469616c00000000000000000000000000000000000000000000602082015250565b6000610e4c602a83610ddf565b9150610e5782610df0565b604082019050919050565b60006020820190508181036000830152610e7b81610e3f565b905091905056fea2646970667358221220f408d4064c3c469ddca766ed4adfccd51f71e2b7b9a6e4c32e2dd91d238e912d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getCredentialsByIssuer(address)": {
        "params": {
          "issuer": "Address of the credential issuer"
        },
        "returns": {
          "_0": "An array of credential IDs"
        }
      },
      "getCredentialsForSubject(address)": {
        "params": {
          "subject": "Address of the credential subject"
        },
        "returns": {
          "_0": "An array of credential IDs"
        }
      },
      "issueCredential(address,bytes32,uint256)": {
        "params": {
          "credentialHash": "A unique hash representing the credential details",
          "expirationPeriod": "Duration in seconds for credential validity",
          "subject": "The address of the credential subject"
        },
        "returns": {
          "credentialId": "Unique identifier for the issued credential"
        }
      },
      "revokeCredential(bytes32)": {
        "params": {
          "credentialId": "Unique identifier of the credential to revoke"
        }
      },
      "verifyCredential(bytes32)": {
        "params": {
          "credentialId": "Unique identifier of the credential"
        },
        "returns": {
          "isValid": "Whether the credential is currently valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCredentialsByIssuer(address)": {
        "notice": "Get credentials issued by a specific issuer"
      },
      "getCredentialsForSubject(address)": {
        "notice": "Get credentials issued to a specific subject"
      },
      "issueCredential(address,bytes32,uint256)": {
        "notice": "Issue a new verifiable credential"
      },
      "revokeCredential(bytes32)": {
        "notice": "Revoke a previously issued credential"
      },
      "verifyCredential(bytes32)": {
        "notice": "Verify a credential's validity"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 550,
        "contract": "contracts/VerifiableCredentials.sol:VerifiableCredentials",
        "label": "credentials",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Credential)545_storage)"
      },
      {
        "astId": 555,
        "contract": "contracts/VerifiableCredentials.sol:VerifiableCredentials",
        "label": "subjectCredentials",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 560,
        "contract": "contracts/VerifiableCredentials.sol:VerifiableCredentials",
        "label": "issuerCredentials",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(Credential)545_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VerifiableCredentials.Credential)",
        "numberOfBytes": "32",
        "value": "t_struct(Credential)545_storage"
      },
      "t_struct(Credential)545_storage": {
        "encoding": "inplace",
        "label": "struct VerifiableCredentials.Credential",
        "members": [
          {
            "astId": 534,
            "contract": "contracts/VerifiableCredentials.sol:VerifiableCredentials",
            "label": "issuer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 536,
            "contract": "contracts/VerifiableCredentials.sol:VerifiableCredentials",
            "label": "subject",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 538,
            "contract": "contracts/VerifiableCredentials.sol:VerifiableCredentials",
            "label": "credentialHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 540,
            "contract": "contracts/VerifiableCredentials.sol:VerifiableCredentials",
            "label": "issuedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 542,
            "contract": "contracts/VerifiableCredentials.sol:VerifiableCredentials",
            "label": "expiresAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 544,
            "contract": "contracts/VerifiableCredentials.sol:VerifiableCredentials",
            "label": "revoked",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}